{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n\n  // Find a wood log block\n  const logBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    return bot.findBlock({\n      matching: block => logNames.includes(block.name),\n      maxDistance: 32\n    });\n  });\n  if (logBlock) {\n    // Mine the wood log block\n    await mineBlock(bot, logBlock.name);\n    bot.chat(\"Wood log mined.\");\n  } else {\n    bot.chat(\"Could not find a wood log.\");\n  }\n}", "description": "async function mineWoodLog(bot) {\n    // The function mines a wood log by exploring the environment to find a log block from various tree types. Once a log block is found, it mines the wood log and notifies that the wood log has been mined. If no log block is found, it indicates that a wood log could not be found.\n}"}, "mineCoalOre": {"code": "async function mineCoalOre(bot) {\n  // Check if the bot has a wooden_pickaxe in the inventory\n  const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n\n  // If the bot doesn't have a wooden_pickaxe, craft one\n  if (!woodenPickaxe) {\n    // Place a crafting table\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n    // Craft a wooden_pickaxe\n    await craftItem(bot, \"wooden_pickaxe\");\n  }\n\n  // Find a coal_ore block nearby\n  let coalOre = bot.findBlock({\n    matching: mcData.blocksByName[\"coal_ore\"].id,\n    maxDistance: 32\n  });\n\n  // If no coal_ore block is found, explore the surroundings to find one\n  if (!coalOre) {\n    coalOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName[\"coal_ore\"].id,\n        maxDistance: 32\n      });\n    });\n  }\n\n  // Equip the wooden_pickaxe and mine the coal_ore block\n  await bot.equip(mcData.itemsByName.wooden_pickaxe.id, \"hand\");\n  await mineBlock(bot, \"coal_ore\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Mined 1 coal ore.\");\n}", "description": "async function mineCoalOre(bot) {\n    // The function is about mining 1 coal ore using a wooden pickaxe. First, it checks if a wooden pickaxe is in the inventory, and if not, it crafts one using a crafting table. It then searches for a nearby coal ore block and, if not found, explores the surroundings until one is located. Once a coal ore block is discovered, the wooden pickaxe is equipped in hand and the coal ore block is mined. Finally, the task completion is reported.\n}"}, "mineAndSmeltIron": {"code": "async function mineAndSmeltIron(bot) {\n  // Find 3 iron_ore blocks nearby or explore the surroundings to find them\n  const ironOres = bot.findBlocks({\n    matching: mcData.blocksByName[\"iron_ore\"].id,\n    maxDistance: 32,\n    count: 3\n  });\n  if (ironOres.length < 3) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundIronOres = bot.findBlocks({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32,\n        count: 3\n      });\n      return foundIronOres.length >= 3;\n    });\n  }\n\n  // Mine the 3 iron_ore blocks using the stone_pickaxe\n  await mineBlock(bot, \"iron_ore\", 3);\n\n  // Place a furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the 3 raw_iron into 3 iron_ingots using coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 3);\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Mined and smelted 3 iron ingots.\");\n}", "description": "async function mineAndSmeltIron(bot) {\n    // The function mines 3 iron ores and smelts them into iron ingots. It first finds 3 iron ores nearby or explores the surroundings to locate them. Once found, it mines the iron ores using a stone pickaxe. Next, it places a furnace and smelts the raw iron into iron ingots using coal as fuel. Finally, it reports the completion of the task.\n}"}, "smeltIronOres": {"code": "async function smeltIronOres(bot) {\n  // Check if there is enough coal in the inventory. If not, mine a coal_ore block.\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < 1) {\n    await mineBlock(bot, \"coal_ore\");\n  }\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the 3 iron ores using coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 3);\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Smelted 3 iron ores into iron ingots.\");\n}", "description": "async function smeltIronOres(bot) {\n    // The function is about smelting 3 iron ores into iron ingots using a furnace. First, check if there is enough coal in the inventory, and if not, mine a coal_ore block. Then, find a suitable position to place the furnace and place it. Next, smelt the 3 iron ores using coal as fuel. Finally, report the completion of the task.\n}"}, "smeltCopperOre": {"code": "async function smeltCopperOre(bot) {\n  // Check if there is enough coal in the inventory. If not, mine a coal_ore block.\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < 1) {\n    await mineBlock(bot, \"coal_ore\");\n  }\n\n  // Mine a copper_ore block\n  await mineBlock(bot, \"copper_ore\");\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the copper ore using coal as fuel\n  await smeltItem(bot, \"copper_ore\", \"coal\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Smelted 1 copper ore into a copper ingot.\");\n}", "description": "async function smeltCopperOre(bot) {\n    // The function is about smelting a copper ore into a copper ingot. First, check if there is enough coal in the inventory, and if not, mine a coal_ore block. Then, mine a copper_ore block. Find a suitable position to place the furnace and place it. Smelt the copper ore using coal as fuel. Finally, report the completion of the task.\n}"}, "craftFurnace": {"code": "async function craftFurnace(bot) {\n  // Check if the bot has a furnace in its inventory\n  const furnaceCount = bot.inventory.count(mcData.itemsByName.furnace.id);\n  if (furnaceCount > 0) {\n    bot.chat(\"Task completed: Already have a furnace in the inventory.\");\n    return;\n  }\n\n  // Mine 8 cobblestone blocks if not enough in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  if (cobblestoneCount < 8) {\n    await mineBlock(bot, \"stone\", 8 - cobblestoneCount);\n  }\n\n  // Place a crafting table if not already placed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  }\n\n  // Craft the furnace using 8 cobblestone blocks\n  await craftItem(bot, \"furnace\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Crafted a furnace.\");\n}", "description": "async function craftFurnace(bot) {\n    // The function is about crafting a furnace. First, check if there's a furnace in the inventory. If not, mine enough cobblestone blocks to have at least 8. Then, place a crafting table if one isn't already nearby. Next, craft the furnace using 8 cobblestone blocks. Finally, report the successful completion of the task.\n}"}, "smeltThreeIronOres": {"code": "async function smeltThreeIronOres(bot) {\n  // Check if there are 3 iron ores in the inventory\n  const ironOreCount = bot.inventory.count(mcData.itemsByName.raw_iron.id);\n  if (ironOreCount < 3) {\n    await mineBlock(bot, \"iron_ore\", 3 - ironOreCount);\n  }\n\n  // Check if there is a furnace in the inventory\n  const furnaceCount = bot.inventory.count(mcData.itemsByName.furnace.id);\n  if (furnaceCount < 1) {\n    await craftItem(bot, \"furnace\");\n  }\n\n  // Place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Check if there is enough coal in the inventory\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < 1) {\n    await mineBlock(bot, \"coal_ore\");\n  }\n\n  // Smelt the 3 iron ores using the furnace and coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 3);\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Smelted 3 iron ores into iron ingots.\");\n}", "description": "async function smeltThreeIronOres(bot) {\n    // The function is about smelting three iron ores into iron ingots. First, check if there are enough iron ores in the inventory, if not, mine the required amount. Next, check for a furnace and craft one if needed, then place it nearby. Ensure there is enough coal in the inventory, mining more if necessary. Finally, smelt the three iron ores using the furnace and coal as fuel, and notify the completion of the task.\n}"}, "ensureIronChestplate": {"code": "async function ensureIronChestplate(bot) {\n  // Check if the bot already has an iron chestplate in its inventory\n  const ironChestplateCount = bot.inventory.count(mcData.itemsByName.iron_chestplate.id);\n  if (ironChestplateCount > 0) {\n    bot.chat(\"Task completed: Already have an iron chestplate in the inventory.\");\n    return;\n  }\n\n  // Craft an iron chestplate\n  await craftIronChestplate(bot);\n}", "description": "async function ensureIronChestplate(bot) {\n    // The function ensures the presence of an iron chestplate in the inventory. It checks if there is already an iron chestplate in the inventory. If not, it proceeds to craft one.\n}"}, "equipIronChestplate": {"code": "async function equipIronChestplate(bot) {\n  // Check if the bot has an iron chestplate in its inventory\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName.iron_chestplate.id);\n  if (ironChestplate) {\n    // Equip the iron chestplate\n    await bot.equip(ironChestplate, \"torso\");\n    bot.chat(\"Task completed: Equipped iron chestplate.\");\n  } else {\n    bot.chat(\"Task failed: No iron chestplate in inventory.\");\n  }\n}", "description": "async function equipIronChestplate(bot) {\n    // The function checks if the bot has an iron chestplate in its inventory. If it does, the iron chestplate is equipped on the torso. If not, an appropriate message is displayed indicating the absence of the iron chestplate in the inventory.\n}"}, "reportIronLeggingsCrafted": {"code": "async function reportIronLeggingsCrafted(bot) {\n  bot.chat(\"Task already completed: Crafted iron leggings.\");\n}", "description": "async function reportIronLeggingsCrafted(bot) {\n    // The function informs the user that the task of crafting iron leggings has already been completed.\n}"}, "equipIronLeggings": {"code": "async function equipIronLeggings(bot) {\n  // Check if the bot has iron leggings in its inventory\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName.iron_leggings.id);\n  if (ironLeggings) {\n    // Equip the iron leggings\n    await bot.equip(ironLeggings, \"legs\");\n    bot.chat(\"Task completed: Equipped iron leggings.\");\n  } else {\n    bot.chat(\"Task failed: No iron leggings in inventory.\");\n  }\n}", "description": "async function equipIronLeggings(bot) {\n    // The function checks if the bot has iron leggings in its inventory, and if so, equips them; otherwise, it informs that there are no iron leggings in the inventory.\n}"}, "craftIronPickaxe": {"code": "async function craftIronPickaxe(bot) {\n  // Check if there is enough coal in the inventory. If not, mine a coal_ore block.\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < 1) {\n    await mineBlock(bot, \"coal_ore\");\n  }\n\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  if (ironIngotCount < 3) {\n    // Place a furnace if not already placed\n    const furnace = bot.findBlock({\n      matching: mcData.blocksByName.furnace.id,\n      maxDistance: 32\n    });\n    if (!furnace) {\n      const furnacePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"furnace\", furnacePosition);\n    }\n    // Smelt raw_iron to get more iron ingots\n    await smeltItem(bot, \"raw_iron\", \"coal\", 3 - ironIngotCount);\n  }\n\n  // Check if there are enough sticks in the inventory\n  const stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (stickCount < 2) {\n    // Craft sticks using spruce_planks\n    await craftItem(bot, \"stick\", 1);\n  }\n\n  // Place a crafting table if not already placed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  }\n\n  // Craft the iron pickaxe using 3 iron ingots and 2 sticks\n  await craftItem(bot, \"iron_pickaxe\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Crafted an iron pickaxe.\");\n}", "description": "async function craftIronPickaxe(bot) {\n    // The function is about crafting an iron pickaxe. First, ensure there is enough coal and iron ingots in the inventory, mining and smelting if necessary. Next, check for enough sticks, and craft more if required. Then, place a crafting table if not already placed. Finally, craft the iron pickaxe using 3 iron ingots and 2 sticks.\n}"}, "smeltSixRawIron": {"code": "async function smeltSixRawIron(bot) {\n  // Check if there is a furnace in the inventory\n  const furnaceCount = bot.inventory.count(mcData.itemsByName.furnace.id);\n  if (furnaceCount < 1) {\n    await craftItem(bot, \"furnace\");\n  }\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Check if there is enough coal in the inventory. If not, mine a coal_ore block.\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < 1) {\n    await mineBlock(bot, \"coal_ore\");\n  }\n\n  // Smelt the 6 raw iron using coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 6);\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Smelted 6 raw iron into iron ingots.\");\n}", "description": "async function smeltSixRawIron(bot) {\n    // The function is about smelting 6 raw iron into iron ingots using a furnace. First, check if there is a furnace in the inventory and craft one if needed. Next, find a suitable position to place the furnace and place it. Then, ensure there is enough coal in the inventory, and mine a coal_ore block if necessary. Finally, smelt the 6 raw iron using coal as fuel and report the completion of the task.\n}"}, "craftIronHelmet": {"code": "async function craftIronHelmet(bot) {\n  // Check if there is a crafting table nearby\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // Place a crafting table if not already placed\n  if (!craftingTable) {\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    if (craftingTableCount < 1) {\n      // Craft a crafting table using spruce_planks\n      await craftItem(bot, \"crafting_table\");\n    }\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  }\n\n  // Craft the iron helmet using 5 iron ingots\n  await craftItem(bot, \"iron_helmet\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Crafted an iron helmet.\");\n}", "description": "async function craftIronHelmet(bot) {\n    // The function is about crafting an iron helmet. First, it checks if there is a crafting table nearby. If not, it places a crafting table using the available inventory. Then, it crafts the iron helmet using 5 iron ingots. Finally, it reports the completion of the task.\n}"}, "equipIronHelmet": {"code": "async function equipIronHelmet(bot) {\n  // Check if the bot has an iron helmet in its inventory\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName.iron_helmet.id);\n  if (ironHelmet) {\n    // Equip the iron helmet\n    await bot.equip(ironHelmet, \"head\");\n    bot.chat(\"Task completed: Equipped iron helmet.\");\n  } else {\n    bot.chat(\"Task failed: No iron helmet in inventory.\");\n  }\n}", "description": "async function equipIronHelmet(bot) {\n    // The function checks if an iron helmet is present in the inventory. If found, it equips the iron helmet on the bot's head. If not found, it indicates the task has failed.\n}"}, "craftIronBoots": {"code": "async function craftIronBoots(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  if (ironIngotCount < 4) {\n    // Mine more iron_ore if needed\n    const ironOreCount = bot.inventory.count(mcData.itemsByName.raw_iron.id);\n    if (ironOreCount < 4) {\n      await mineBlock(bot, \"iron_ore\", 4 - ironOreCount);\n    }\n\n    // Check if there is enough coal in the inventory. If not, mine more coal_ore.\n    const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n    if (coalCount < 1) {\n      await mineBlock(bot, \"coal_ore\");\n    }\n\n    // Place a furnace if not already placed\n    const furnace = bot.findBlock({\n      matching: mcData.blocksByName.furnace.id,\n      maxDistance: 32\n    });\n    if (!furnace) {\n      const furnacePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"furnace\", furnacePosition);\n    }\n\n    // Smelt raw_iron to get more iron ingots\n    await smeltItem(bot, \"raw_iron\", \"coal\", 4);\n  }\n\n  // Place a crafting table if not already placed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  }\n\n  // Craft the iron boots using 4 iron ingots\n  await craftItem(bot, \"iron_boots\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Crafted iron boots.\");\n}", "description": "async function craftIronBoots(bot) {\n    // The function is about crafting iron boots. First, it checks if there are enough iron ingots in the inventory. If not, it mines iron ore and smelts it into iron ingots using coal. Then, it places a crafting table if not already placed. Finally, it crafts the iron boots using 4 iron ingots and reports the completion of the task.\n}"}, "mineFiveIronOres": {"code": "async function mineFiveIronOres(bot) {\n  // Find 5 iron_ore blocks nearby or explore the surroundings to find them\n  const ironOres = bot.findBlocks({\n    matching: mcData.blocksByName[\"iron_ore\"].id,\n    maxDistance: 32,\n    count: 5\n  });\n  if (ironOres.length < 5) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundIronOres = bot.findBlocks({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32,\n        count: 5\n      });\n      return foundIronOres.length >= 5;\n    });\n  }\n\n  // Mine the 5 iron_ore blocks using the stone_pickaxe or higher-tier pickaxe\n  await mineBlock(bot, \"iron_ore\", 5);\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Mined 5 iron ores.\");\n}", "description": "async function mineFiveIronOres(bot) {\n    // The function focuses on mining 5 iron ores using a stone pickaxe or higher-tier pickaxe. First, it searches for 5 iron ore blocks nearby or explores the surroundings to find them. If there are less than 5 iron ores nearby, it continues exploring until 5 iron ores are found. Once the iron ores are located, the function mines the 5 iron ore blocks. Finally, it reports the completion of the task by stating that 5 iron ores have been mined.\n}"}, "craftBow": {"code": "async function craftBow(bot) {\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    if (craftingTableCount < 1) {\n      // Craft a crafting table using spruce_planks\n      await craftItem(bot, \"crafting_table\");\n    }\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    craftingTable = bot.blockAt(craftingTablePosition);\n  }\n\n  // Check if there are enough sticks and strings in the inventory\n  const stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  const stringCount = bot.inventory.count(mcData.itemsByName.string.id);\n  if (stickCount < 3) {\n    // Craft sticks using spruce_planks\n    await craftItem(bot, \"stick\", 1);\n  }\n  if (stringCount < 3) {\n    // Kill spiders to obtain more strings\n    for (let i = 0; i < 3 - stringCount; i++) {\n      await killMob(bot, \"spider\");\n    }\n  }\n\n  // Craft the bow using 3 sticks and 3 strings\n  await craftItem(bot, \"bow\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Crafted a bow.\");\n}", "description": "async function craftBow(bot) {\n    // The function is about crafting a bow. First, it checks for a nearby crafting table or crafts one if needed. Then, it ensures there are enough sticks and strings in the inventory, crafting sticks or killing spiders for strings if necessary. Finally, it crafts the bow using 3 sticks and 3 strings and reports the completion of the task.\n}"}, "obtainString": {"code": "async function obtainString(bot) {\n  // 1) Equip the wooden sword\n  const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  if (!woodenSword) {\n    bot.chat(\"Wooden sword not found in inventory.\");\n    return;\n  }\n  await bot.equip(woodenSword, \"hand\");\n\n  // 2) Explore the surroundings to find a spider\n  const spider = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    return bot.nearestEntity(entity => {\n      return entity.name === \"spider\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n  });\n\n  // 3) Kill the spider to obtain the string\n  if (spider) {\n    await killMob(bot, \"spider\");\n    bot.chat(\"Task completed: Obtained 1 string.\");\n  } else {\n    bot.chat(\"Task failed: Could not find a spider.\");\n  }\n}", "description": "async function obtainString(bot) {\n    // The function is about obtaining a string by killing a spider using a wooden sword. First, equip the wooden sword if available in the inventory. Then, explore the surroundings to find a spider within a specified distance. If a spider is found, kill it using the wooden sword to obtain the string.\n}"}, "obtainFlint": {"code": "async function obtainFlint(bot) {\n  // Check if the bot already has flint in the inventory\n  const flintCount = bot.inventory.count(mcData.itemsByName.flint.id);\n  if (flintCount > 0) {\n    bot.chat(\"Task completed: Already have flint in the inventory.\");\n    return;\n  }\n\n  // Check if the bot has gravel in the inventory\n  const gravelCount = bot.inventory.count(mcData.itemsByName.gravel.id);\n  if (gravelCount === 0) {\n    // Explore the surroundings to find gravel\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const gravel = bot.findBlock({\n        matching: mcData.blocksByName[\"gravel\"].id,\n        maxDistance: 32\n      });\n      return gravel;\n    });\n  }\n\n  // Mine gravel blocks until the bot obtains 1 flint\n  let obtainedFlint = false;\n  while (!obtainedFlint) {\n    await mineBlock(bot, \"gravel\");\n    // Check if the bot has flint in the inventory after mining the gravel block\n    const newFlintCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    if (newFlintCount > flintCount) {\n      obtainedFlint = true;\n    }\n  }\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Obtained 1 flint.\");\n}", "description": "async function obtainFlint(bot) {\n    // The function is about obtaining flint. It checks if the bot already has flint in the inventory. If not, it checks if the bot has gravel. If there's no gravel, the bot explores the surroundings to find some. Then, it mines gravel blocks until obtaining 1 flint. Once flint is obtained, the task is considered complete.\n}"}, "killSalmonForRawFish": {"code": "async function killSalmonForRawFish(bot) {\n  // 1) Check if there is a wooden sword in the inventory, if not, craft one\n  let woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  if (!woodenSword) {\n    await craftItem(bot, \"wooden_sword\");\n    woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  }\n\n  // 2) Equip the wooden sword\n  await bot.equip(woodenSword, \"hand\");\n\n  // 3) Explore the surroundings to find a salmon\n  const salmon = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    return bot.nearestEntity(entity => {\n      return entity.name === \"salmon\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n  });\n\n  // 4) Kill the salmon to obtain the raw fish\n  if (salmon) {\n    await killMob(bot, \"salmon\");\n    bot.chat(\"Task completed: Killed 1 salmon for raw fish.\");\n  } else {\n    bot.chat(\"Task failed: Could not find a salmon.\");\n  }\n}", "description": "async function killSalmonForRawFish(bot) {\n    // The function is about killing a salmon to obtain raw fish using a wooden sword. First, check if a wooden sword is in the inventory and craft one if it's not available. Equip the wooden sword in the hand, and explore the surroundings to find a salmon. Once a salmon is found, kill it to obtain the raw fish.\n}"}, "equipIronBoots": {"code": "async function equipIronBoots(bot) {\n  // Check if the bot has iron boots in its inventory\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_boots.id);\n  if (ironBoots) {\n    // Equip the iron boots\n    await bot.equip(ironBoots, \"feet\");\n    bot.chat(\"Task completed: Equipped iron boots.\");\n  } else {\n    bot.chat(\"Task failed: No iron boots in inventory.\");\n  }\n}", "description": "async function equipIronBoots(bot) {\n    // The function checks if the bot has iron boots in its inventory, and if so, equips them to the bot's feet slot; otherwise, it reports that there are no iron boots in the inventory.\n}"}, "craftFishingRod": {"code": "async function craftFishingRod(bot) {\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    if (craftingTableCount < 1) {\n      // Craft a crafting table using spruce_planks\n      await craftItem(bot, \"crafting_table\");\n    }\n    // Find a suitable position on a solid block to place the crafting table\n    const suitablePosition = bot.entity.position.floored();\n    for (let y = bot.entity.position.y - 1; y <= bot.entity.position.y + 1; y++) {\n      for (let x = bot.entity.position.x - 1; x <= bot.entity.position.x + 1; x++) {\n        for (let z = bot.entity.position.z - 1; z <= bot.entity.position.z + 1; z++) {\n          const currentPosition = new Vec3(x, y, z);\n          const currentBlock = bot.blockAt(currentPosition);\n          const blockAbove = bot.blockAt(currentPosition.offset(0, 1, 0));\n          if (currentBlock && currentBlock.boundingBox === \"block\" && blockAbove.name === \"air\") {\n            suitablePosition.set(x, y + 1, z);\n            break;\n          }\n        }\n      }\n    }\n    await placeItem(bot, \"crafting_table\", suitablePosition);\n    craftingTable = bot.blockAt(suitablePosition);\n  }\n\n  // Check if there are enough sticks and strings in the inventory\n  const stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  const stringCount = bot.inventory.count(mcData.itemsByName.string.id);\n  if (stickCount < 3) {\n    // Craft sticks using spruce_planks\n    await craftItem(bot, \"stick\", 1);\n  }\n  if (stringCount < 2) {\n    // Kill spiders to obtain more strings\n    for (let i = 0; i < 2 - stringCount; i++) {\n      await killMob(bot, \"spider\");\n    }\n  }\n\n  // Craft the fishing rod using 3 sticks and 2 strings\n  await craftItem(bot, \"fishing_rod\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Crafted a fishing rod.\");\n}", "description": "async function craftFishingRod(bot) {\n    // The function is about crafting a fishing rod. First, it checks for a nearby crafting table or crafts one if needed. Then, it ensures there are enough sticks and strings in the inventory by crafting sticks or killing spiders for strings. Once the required materials are available, it crafts the fishing rod and reports the completion of the task.\n}"}, "craftChest": {"code": "async function craftChest(bot) {\n  // Check if there is a chest in the inventory\n  const chestCount = bot.inventory.count(mcData.itemsByName.chest.id);\n  if (chestCount > 0) {\n    bot.chat(\"Task completed: Already have a chest in the inventory.\");\n    return;\n  }\n\n  // Check if there are enough spruce_planks in the inventory\n  const sprucePlankCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (sprucePlankCount < 8) {\n    // Mine spruce_log if not enough in the inventory\n    const spruceLogCount = bot.inventory.count(mcData.itemsByName.spruce_log.id);\n    if (spruceLogCount < 2) {\n      await mineBlock(bot, \"spruce_log\", 2 - spruceLogCount);\n    }\n    // Craft 4 spruce_planks using 2 spruce_log\n    await craftItem(bot, \"spruce_planks\", 2);\n  }\n\n  // Place a crafting table if not already placed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  }\n\n  // Craft the chest using 8 spruce_planks\n  await craftItem(bot, \"chest\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Crafted a chest.\");\n}", "description": "async function craftChest(bot) {\n    // The function is about crafting a chest using spruce planks. First, check if there is already a chest in the inventory. If not, ensure there are enough spruce planks in the inventory, and if not, mine spruce logs and craft spruce planks. Then, place a crafting table if one is not already placed. Finally, craft the chest using 8 spruce planks and report the completion of the task.\n}"}, "craftIronSword": {"code": "async function findSuitableBlock(bot) {\n  const nearbyBlocks = bot.findBlocks({\n    matching: block => {\n      return block.name !== \"air\";\n    },\n    maxDistance: 32,\n    count: 10\n  });\n  for (const blockPos of nearbyBlocks) {\n    const block = bot.blockAt(blockPos);\n    const aboveBlock = bot.blockAt(blockPos.offset(0, 1, 0));\n    if (aboveBlock.name === \"air\") {\n      return block;\n    }\n  }\n  return null;\n}\n\nasync function craftIronSword(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  if (ironIngotCount < 2) {\n    // Mine more iron_ore if needed\n    const ironOreCount = bot.inventory.count(mcData.itemsByName.raw_iron.id);\n    if (ironOreCount < 2) {\n      await mineBlock(bot, \"iron_ore\", 2 - ironOreCount);\n    }\n\n    // Smelt raw_iron to get more iron ingots\n    await smeltItem(bot, \"raw_iron\", \"coal\", 2);\n  }\n\n  // Check if there is a stick in the inventory\n  const stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (stickCount < 1) {\n    // Craft a stick using spruce_planks\n    await craftItem(bot, \"stick\");\n  }\n\n  // Check if there is a crafting table nearby\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // Place a crafting table if not already placed\n  if (!craftingTable) {\n    const suitableBlock = await findSuitableBlock(bot);\n    if (!suitableBlock) {\n      bot.chat(\"No suitable block found to place the crafting table.\");\n      return;\n    }\n    const craftingTablePosition = suitableBlock.position.offset(0, 1, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  }\n\n  // Craft the iron sword using 2 iron ingots and 1 stick\n  await craftItem(bot, \"iron_sword\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Crafted an iron sword.\");\n}", "description": "async function craftIronSword(bot) {\n    // The function is about crafting an iron sword. First, it checks if there are enough iron ingots in the inventory, and if not, mines and smelts iron ore to obtain them. Next, it ensures there is a stick in the inventory, crafting one if necessary. Then, it searches for a nearby crafting table, placing one if none is found. Finally, it crafts the iron sword using 2 iron ingots and 1 stick, and reports the completion of the task.\n}"}, "equipIronSword": {"code": "async function equipIronSword(bot) {\n  // Check if the bot has an iron sword in its inventory\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  if (ironSword) {\n    // Equip the iron sword\n    await bot.equip(ironSword, \"hand\");\n    bot.chat(\"Task completed: Equipped iron sword.\");\n  } else {\n    bot.chat(\"Task failed: No iron sword in inventory.\");\n  }\n}", "description": "async function equipIronSword(bot) {\n    // The function checks if the bot has an iron sword in its inventory, and if it does, it equips the iron sword in its hand. If no iron sword is found, it reports a failed task.\n}"}, "craftTorchesWithTable": {"code": "async function craftTorchesWithTable(bot) {\n  // Check if there is a coal in the inventory. If not, mine a coal_ore block.\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < 1) {\n    await mineBlock(bot, \"coal_ore\");\n  }\n\n  // Check if there is a stick in the inventory. If not, craft a stick using spruce_planks.\n  const stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (stickCount < 1) {\n    await craftItem(bot, \"stick\");\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    if (craftingTableCount < 1) {\n      // Craft a crafting table using spruce_planks\n      await craftItem(bot, \"crafting_table\");\n    }\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    craftingTable = bot.blockAt(craftingTablePosition);\n  }\n\n  // Craft 4 torches using 1 coal and 1 stick with a crafting table\n  await craftItem(bot, \"torch\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Crafted 4 torches with a crafting table.\");\n}", "description": "async function craftTorchesWithTable(bot) {\n    // The function focuses on crafting 4 torches using a crafting table. It first checks for coal and stick in the inventory, and if not found, mines a coal block and crafts a stick. Then, it searches for a crafting table nearby or in the inventory, and if not found, crafts and places one. Finally, it crafts 4 torches using the crafting table with 1 coal and 1 stick, and reports the completion of the task.\n}"}, "mineThreeCopperOres": {"code": "async function mineThreeCopperOres(bot) {\n  // Check if the bot has a stone_pickaxe in the inventory\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n\n  // If the bot doesn't have a stone_pickaxe, craft one\n  if (!stonePickaxe) {\n    // Place a crafting table\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n    // Craft a stone_pickaxe\n    await craftItem(bot, \"stone_pickaxe\");\n  }\n\n  // Mine 3 copper_ore blocks using the stone_pickaxe\n  await mineBlock(bot, \"copper_ore\", 3);\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Mined 3 copper ores.\");\n}", "description": "async function mineThreeCopperOres(bot) {\n    // The function is about mining 3 copper ores using a stone pickaxe. First, check if the bot has a stone pickaxe in the inventory. If not, place a crafting table and craft a stone pickaxe. Once the stone pickaxe is available, mine a total of 3 copper ore blocks using the stone pickaxe. Finally, report the completion of the task.\n}"}, "openAndCheckChest": {"code": "async function openAndCheckChest(bot) {\n  // Move to the chest at (1156, 66, 707)\n  const chestPosition = new Vec3(1156, 66, 707);\n  await getItemFromChest(bot, chestPosition, {});\n\n  // Open the chest and check its contents\n  await checkItemInsideChest(bot, chestPosition);\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Opened and checked the chest at (1156, 66, 707).\");\n}", "description": "async function openAndCheckChest(bot) {\n    // The function moves the bot to a specific chest location, opens it, and checks its contents. After completing the task, it reports the completion by mentioning the chest's coordinates.\n}"}, "cookSalmon": {"code": "async function cookSalmon(bot) {\n  // 1) Check if there is a furnace in the inventory, if not, craft one\n  const furnaceCount = bot.inventory.count(mcData.itemsByName.furnace.id);\n  if (furnaceCount < 1) {\n    await craftItem(bot, \"furnace\");\n  }\n\n  // 2) Find a suitable position to place the furnace and place it\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // 3) Check if there is enough coal in the inventory, if not, mine a coal_ore block\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < 1) {\n    await mineBlock(bot, \"coal_ore\");\n  }\n\n  // 4) Cook the salmon using the furnace and coal as fuel\n  await smeltItem(bot, \"salmon\", \"coal\");\n\n  // 5) Report the completion of the task\n  bot.chat(\"Task completed: Cooked 1 salmon.\");\n}", "description": "async function cookSalmon(bot) {\n    // The function is about cooking a salmon using a furnace. First, it checks if there's a furnace in the inventory and crafts one if needed. Next, it finds a suitable position to place the furnace and places it. Then, it ensures there's enough coal in the inventory, mining a coal_ore block if necessary. Afterward, it cooks the salmon using the furnace and coal as fuel. Finally, it reports the completion of the task.\n}"}, "eatCookedSalmon": {"code": "async function eatCookedSalmon(bot) {\n  // Check if the bot's health is greater than 0\n  if (bot.health > 0) {\n    // Check if the bot's hunger is less than 20\n    if (bot.food < 20) {\n      // Equip the cooked salmon to the bot's hand\n      const cookedSalmon = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_salmon.id);\n      await bot.equip(cookedSalmon, \"hand\");\n\n      // Consume the cooked salmon\n      await bot.consume();\n\n      // Report the completion of the task\n      bot.chat(\"Task completed: Ate 1 cooked salmon.\");\n    } else {\n      // Notify the user that the task is not necessary because the hunger is already full\n      bot.chat(\"Task not necessary: Cannot eat cooked salmon because hunger is already full.\");\n    }\n  } else {\n    // Notify the user that the task cannot be completed due to low health\n    bot.chat(\"Task failed: Cannot eat cooked salmon due to low health.\");\n  }\n}", "description": "async function eatCookedSalmon(bot) {\n    // The function checks if the bot has health greater than 0 and hunger less than 20. If so, it equips cooked salmon to the bot's hand and consumes it, then reports the completion of the task. If the hunger is already full, it notifies the user that the task is not necessary. If the health is too low, it reports that the task cannot be completed.\n}"}, "fishOneItem": {"code": "async function fishOneItem(bot) {\n  // Equip the fishing rod\n  const fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  await bot.equip(fishingRod, \"hand\");\n\n  // Find a body of water\n  const waterBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const water = bot.findBlock({\n      matching: mcData.blocksByName.water.id,\n      maxDistance: 32\n    });\n    return water;\n  });\n  if (!waterBlock) {\n    bot.chat(\"Could not find a body of water to fish in.\");\n    return;\n  }\n\n  // Go to the water block and fish 1 item\n  await bot.pathfinder.goto(new GoalGetToBlock(waterBlock.position.x, waterBlock.position.y, waterBlock.position.z));\n  await bot.fish();\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Fished 1 item.\");\n}", "description": "async function fishOneItem(bot) {\n    // The function is about fishing one item using a fishing rod. First, equip the fishing rod from the inventory. Then, explore the environment to find a body of water. If a water block is found, navigate to its location. Once there, fish for one item. Finally, report the completion of the task.\n}"}, "craftMoreSnowBlocks": {"code": "async function craftMoreSnowBlocks(bot) {\n  // Check if there are at least 16 snowballs in the inventory\n  const snowballCount = bot.inventory.count(mcData.itemsByName.snowball.id);\n  if (snowballCount < 16) {\n    // Collect 8 more snowballs\n    await mineBlock(bot, \"snow\", 8);\n  }\n\n  // Place a crafting table if not already placed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  }\n\n  // Craft 4 snow blocks using 16 snowballs\n  await craftItem(bot, \"snow_block\", 4);\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Crafted 4 snow blocks.\");\n}", "description": "async function craftMoreSnowBlocks(bot) {\n    // The function is about crafting 4 snow blocks. First, check if there are at least 16 snowballs in the inventory. If not, mine 8 more snow blocks. Then, place a crafting table if it hasn't been placed already. Craft 4 snow blocks using 16 snowballs at the crafting table. Finally, report the completion of the task.\n}"}, "placeChest": {"code": "async function placeChest(bot) {\n  // Check if there is a chest in the inventory\n  const chest = bot.inventory.findInventoryItem(mcData.itemsByName.chest.id);\n  if (chest) {\n    // Place the chest near the player\n    const chestPosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"chest\", chestPosition);\n    bot.chat(\"Task completed: Placed a chest.\");\n  } else {\n    bot.chat(\"Task failed: No chest in inventory.\");\n  }\n}", "description": "async function placeChest(bot) {\n    // The function is about placing a chest near the player. First, check if there is a chest in the inventory. If a chest is found, place it to the side of the player's current position. If the chest is successfully placed, notify the player with a completion message. If there is no chest in the inventory, notify the player with a failure message.\n}"}, "openAndCheckChestAt1365": {"code": "async function openAndCheckChestAt1365(bot) {\n  // Move to the chest at (1365, 11, 987)\n  const chestPosition = new Vec3(1365, 11, 987);\n  await getItemFromChest(bot, chestPosition, {});\n\n  // Open the chest and check its contents\n  await checkItemInsideChest(bot, chestPosition);\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Opened and checked the chest at (1365, 11, 987).\");\n}", "description": "async function openAndCheckChestAt1365(bot) {\n    // The function moves to a specific chest located at coordinates (1365, 11, 987), opens it, and checks its contents. After checking the contents, it reports the completion of the task.\n}"}, "mineRedstoneOre": {"code": "async function mineRedstoneOre(bot) {\n  // Find a redstone_ore block nearby or explore the surroundings to find one\n  let redstoneOre = bot.findBlock({\n    matching: mcData.blocksByName[\"redstone_ore\"].id,\n    maxDistance: 32\n  });\n  if (!redstoneOre) {\n    redstoneOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName[\"redstone_ore\"].id,\n        maxDistance: 32\n      });\n    });\n  }\n\n  // Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Mine the redstone_ore block using the iron_pickaxe\n  await mineBlock(bot, \"redstone_ore\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Mined 1 redstone ore.\");\n}", "description": "async function mineRedstoneOre(bot) {\n    // The function focuses on mining a single redstone ore block using an iron pickaxe. First, it searches for a nearby redstone ore or explores the surroundings to find one. Once found, the function equips the iron pickaxe from the inventory. Finally, it mines the redstone ore block using the iron pickaxe and reports the completion of the task.\n}"}, "mineDeepslateIronOre": {"code": "async function mineDeepslateIronOre(bot) {\n  // Find a deepslate_iron_ore block nearby or explore the surroundings to find one\n  let deepslateIronOre = bot.findBlock({\n    matching: mcData.blocksByName[\"deepslate_iron_ore\"].id,\n    maxDistance: 32\n  });\n  if (!deepslateIronOre) {\n    deepslateIronOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName[\"deepslate_iron_ore\"].id,\n        maxDistance: 32\n      });\n    });\n  }\n\n  // Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Mine the deepslate_iron_ore block using the iron_pickaxe\n  await mineBlock(bot, \"deepslate_iron_ore\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Mined 1 deepslate iron ore.\");\n}", "description": "async function mineDeepslateIronOre(bot) {\n    // The function is about mining a deepslate iron ore block using an iron pickaxe. First, it looks for a deepslate iron ore block nearby or explores the surroundings to find one. Once the block is found, it equips an iron pickaxe from the inventory. Then, the deepslate iron ore block is mined using the iron pickaxe. Upon completion, a message is sent indicating that the task is completed and one deepslate iron ore has been mined.\n}"}, "mineDeepslateDiamondOre": {"code": "async function mineDeepslateDiamondOre(bot) {\n  // Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find a deepslate_diamond_ore block nearby or explore the surroundings to find one\n  let deepslateDiamondOre = bot.findBlock({\n    matching: mcData.blocksByName[\"deepslate_diamond_ore\"].id,\n    maxDistance: 32\n  });\n  if (!deepslateDiamondOre) {\n    deepslateDiamondOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName[\"deepslate_diamond_ore\"].id,\n        maxDistance: 32\n      });\n    });\n  }\n\n  // Mine the deepslate_diamond_ore block using the iron_pickaxe\n  await mineBlock(bot, \"deepslate_diamond_ore\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Mined 1 deepslate diamond ore.\");\n}", "description": "async function mineDeepslateDiamondOre(bot) {\n    // The function is about mining a deepslate diamond ore using an iron pickaxe. First, equip the iron pickaxe in the hand. Then, find a deepslate diamond ore block nearby or explore the surroundings to find one. Once a deepslate diamond ore block is found, mine it using the iron pickaxe. Finally, report the completion of the task.\n}"}, "mineLapisLazuliOre": {"code": "async function mineLapisLazuliOre(bot) {\n  // Check if the bot has a stone, iron, diamond, or netherite pickaxe in the inventory\n  const pickaxe = bot.inventory.items().find(item => {\n    return item.name === \"stone_pickaxe\" || item.name === \"iron_pickaxe\" || item.name === \"diamond_pickaxe\" || item.name === \"netherite_pickaxe\";\n  });\n\n  // Equip the appropriate pickaxe\n  if (pickaxe) {\n    await bot.equip(pickaxe, \"hand\");\n  } else {\n    // Report the absence of an appropriate pickaxe and exit\n    bot.chat(\"I don't have a suitable pickaxe to mine Lapis Lazuli ore.\");\n    return;\n  }\n\n  // Find a lapis_ore block nearby or explore the surroundings to find one\n  let lapisOre = bot.findBlock({\n    matching: mcData.blocksByName[\"lapis_ore\"].id,\n    maxDistance: 32\n  });\n  if (!lapisOre) {\n    lapisOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      return bot.findBlock({\n        matching: mcData.blocksByName[\"lapis_ore\"].id,\n        maxDistance: 32\n      });\n    });\n  }\n\n  // Mine the lapis_ore block using the equipped pickaxe\n  await mineBlock(bot, \"lapis_ore\");\n\n  // Report the completion of the task\n  bot.chat(\"Task completed: Mined 1 Lapis Lazuli ore.\");\n}", "description": "async function mineLapisLazuliOre(bot) {\n    // The function focuses on mining a Lapis Lazuli ore using an appropriate pickaxe. First, it checks if the bot has a stone, iron, diamond, or netherite pickaxe in its inventory. If a suitable pickaxe is found, the bot equips it. If not, the bot informs the user and exits. The bot then searches for a Lapis Lazuli ore block nearby or explores the area to find one. Once the ore block is found, the bot mines it using the equipped pickaxe and reports the task completion.\n}"}}